#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2012 Martin Ueding <dev@martin-ueding.de>

###############################################################################
#                                License (MIT)                                #
###############################################################################
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
Prints the total number of bogomips of all processors added up. If the ``-v``
command line option is supplied, it will display the bogomips of each core if
they are different, grouped together if they are almost the same.

The file ``/proc/cpuinfo`` is used to aquire the data.
"""

from math import sqrt
import argparse

__docformat__ = "restructuredtext en"

def mean(a):
    """
    Calculate the mean of the given numbers in the list.
    """
    return sum(a) / len(a)

def std(a):
    """
    Calculate the standard deviation.
    """
    m = mean(a)
    s = sqrt(sum([(x - m)**2 for x in a])) / len(a)
    return s

def main():
    options = _parse_args()

    mips = []

    with open("/proc/cpuinfo") as f:
        for line in f:
            if not line.startswith("bogomips"):
                continue

            parts = line.split()
            mips.append(float(parts[2]))

    if options.verbose:
        # If the values are close to each other, the cores seem to be very
        # similar, so that they can be grouped. If not, list all the cores.
        if std(mips) > (mean(mips) / 100):
            print("{cores} = {total}".format(
                cores=' + '.join(map(str, mips)), total=int(sum(mips))))
        else:
            print("{count} × {mean} = {total}".format(
                count=len(mips), mean=int(mean(mips)), total=int(sum(mips))))
    else:
        print(sum(mips))

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(
        description="Sums up the bogomips of all CPU cores.")
    parser.add_argument("-v", dest="verbose", action="store_true",
                        default=False, help="Show indivitual cores.")

    return parser.parse_args()

if __name__ == "__main__":
    main()
